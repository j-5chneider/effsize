---
title: "Reproducible_Report_StudyII"
format: 
  html:
    toc: true
    theme: flatly  
editor_options: 
  chunk_output_type: console
---

## Data Import
```{r}
library(formr)
library(tidyverse)
library(skimr)
library(GGally)
library(ggforce)
library(brms)
# Import item data from .csv
study2_data <- read_csv(here::here("data/teachers_study2_update00.csv"))

# Import detailed data .json
study2_data_detailed <- as.data.frame(jsonlite::fromJSON(here::here("data/teachers_study2_update00_detailed.json")))
```


## Participants
The data download has `r nrow(study2_data)` rows and `r nrow(study2_data |> filter(!is.na(ended)))` finished the survey. Of theses `r nrow(study2_data |> dplyr::filter(!is.na(ended)) |> dplyr::filter(!is.na(attention_check)))` did not pass the attention check.
So the data we will use is defined as follows:
```{r}
data <- 
    study2_data |> 
    filter(!is.na(ended)) |>
    mutate(attention_check_passed = is.na(attention_check)) |> 
    as_tibble()
```

## Data wrangling
### Wrangling item data
First we create a specific dataframe which contains the information about effect size, plottype ...
```{r}
plot_info <- data %>%
    # we only need the rows with info on plots
    select(session, contains("plot")) |> 
    # make a long df
    pivot_longer(2:21, names_to = "variables", values_to = "values", 
                 values_transform = as.character) %>% 
    # separate the info into three columns
    separate(col = values, into = c("type", "axis", "effsize"),
             sep = "_", remove = F) %>%
    mutate(plot = variables,       # rename variables for later join
                  type = paste(type, axis, sep = "_")) %>%
    select(-variables, -axis)
```

Next we wrangle a separate dataframe which contains just the answers of the participants to the items, their identifier and the plotorder.
```{r}
#| label: item_datawrangling
item_values <- data %>%
    dplyr::select(session, contains(c("sensi_", "acccl_", "accov_", "accu3_", "value_", "infor_", "diffi_"))) %>% 
    pivot_longer(-session, names_to = "variables", values_to = "values", 
                 values_transform = as.character) %>%
    # create variable for later join
    mutate(plot = paste0("plotx_", str_sub(variables, -2, -1)), 
           variables = str_sub(variables, 1, -4)) %>%    
    # rename variable names to get a data set 
    # with one line per participant per page
    pivot_wider(id_cols = c(session, plot), names_from = "variables", 
                values_from = "values")
```

Then we join these two data sets and recode/calculate some of the dependet variables like accuracy...
```{r}
#| label: item_datajoining
data_w <- full_join(plot_info, 
                    item_values,
                    by = c("session", "plot")) %>% 
    select(-values) %>%
    mutate(rating_am = as.numeric(acccl), # some var need to be defined as
           rating_u3 = as.numeric(accu3), # numeric again
           rating_ov = as.numeric(accov),
           diffi = as.numeric(diffi),
           infor = as.numeric(infor),
           value = as.numeric(value),
           effsize = as.numeric(effsize),
           effsize_am = case_when( 
           # there is no negative Cliff's Delta, so we have to compute 
           # two transformations
               effsize > 0 ~   (((2*pnorm(effsize/2))-1)/pnorm(effsize/2)),
           # transform the actual effect size Cohen's d to Cliff's Delta
               effsize < 0 ~ (- (((2*pnorm(abs(effsize)/2))-1)/pnorm(abs(effsize)/2))) 
           # transform the actual effect size Cohen's d to Cliff's Delta 
           # and make it negative as in the item
           ),
           effsize_u3 = 1-pnorm(effsize), # reverse so that it fits the direction of the U3 item
           # transform the actual effect size Cohen's d to Cohen's U3
           effsize_ov = 2 * pnorm(-abs(effsize) / 2), 
           # transform the actual effect size Cohen's d to overlap
           # actual difference of rating relative to depicted effectsize 
           diff_am = (rating_am - effsize_am)/2,
           # actual difference of rating relative to depicted effectsize
           diff_u3 = (rating_u3/100) - effsize_u3,
           # actual difference of rating relative to depicted effectsize 
           diff_ov = (rating_ov/100) - effsize_ov) %>%
    group_by(session) %>% 
    mutate(rating_ov_misconcept = median(rating_ov, na.rm = T) < 68.9,
           rating_u3_misconcept = median(rating_u3, na.rm = T) < 21.2) %>% 
    ungroup() %>% 
    mutate(rating_u3_filtered = ifelse(rating_u3_misconcept == T, NA, rating_u3),
           rating_ov_filtered = ifelse(rating_ov_misconcept == T, NA, rating_ov),
           diff_u3_filtered = (rating_u3_filtered/100) - effsize_u3,
           diff_ov_filtered = (rating_ov_filtered/100) - effsize_ov,
           sensi_binary = ifelse(is.na(sensi), # 1 if NOT "equal"
                                        NA,
                                        as.numeric(!grepl("equal", sensi))),
           sensi_ordinal = ordered(factor(substr(sensi, 55, 100)),
                                   levels = c("inferior",
                                              "equal",
                                              "superior")),
           sensi_binary_filtered = case_when(sensi_ordinal == "equal" ~ 0, 
                                             (sensi_ordinal == "inferior" & 
                                                  effsize < 0) | 
                                                  (sensi_ordinal == "superior" & 
                                                  effsize > 0) ~ as.numeric(NA),
                                             (sensi_ordinal == "inferior" & # was not there
                                                  effsize > 0) | 
                                                  (sensi_ordinal == "superior" & 
                                                  effsize < 0) ~ 1, 
                                             TRUE ~ as.numeric(NA)), # was 1
           sensi_correct = case_when(sensi_ordinal == "equal" ~ "judged equal", 
                                     (sensi_ordinal == "inferior" & 
                                                  effsize < 0) | 
                                                  (sensi_ordinal == "superior" & 
                                                  effsize > 0) ~ "wrong direction",
                                             (sensi_ordinal == "inferior" & # was not there
                                                  effsize > 0) | 
                                                  (sensi_ordinal == "superior" & 
                                                  effsize < 0) ~ "right direction", 
                                             TRUE ~ NA_character_),
           effsize_abs = abs(effsize),
           ameffsize_overunderstimation = case_when(effsize_am > 0 ~ ifelse(effsize_am > rating_am,
                                                                            "magnitude_underrated",
                                                                            ifelse(effsize_am == rating_am,
                                                                                   "exact",
                                                                                   "magnitude_overrated")),
                                                    effsize_am < 0 ~ ifelse(rating_am < effsize_am,
                                                                            "magnitude_overrated",
                                                                            ifelse(effsize_am == rating_am,
                                                                                   "exact",
                                                                                   "magnitude_underrated")))) |> 
    # add the between-person conditions group and topic
    left_join(data |> select(session, group, topic)) |> 
    # create binary variables for the presence of a benchmark or signaling
    mutate(gr_benchmark = ifelse(grepl("benchmark", group), "benchmark", "nobenchmark"),
           gr_signaling = ifelse(grepl("signaling", group), "signaling", "nosignaling"))
```

### Wrangling time data
```{r}
#| label: timestamp_datawrangling

study_w_timestamp <- 
    study2_data_detailed |> 
    as_tibble() |> 
    # filter participants from study2_w only
    filter(session %in% data$session) %>% 
    # we only need vars sensitivity or accuracy
    dplyr::filter(str_detect(item_name, "sensi|acccl|accu3|accov")) %>%  
    # create var with plot number
    mutate(plot = paste0("plotx_", str_sub(item_name, -2, -1))) %>% 
    relocate(session, plot) %>% 
    # delete the page number in item name
    mutate(item_name = str_sub(item_name, 1, 5)) %>%  
    pivot_wider(id_cols = c(session, plot), names_from = item_name, 
                values_from = answered_relative) %>% 
    rowwise() %>%
    # what was the time of the first item to be clicked?
    mutate(effic = min(sensi, acccl, accu3, accov, na.rm=T)) %>%
    ungroup() %>% 
    dplyr::select(session, plot, effic, sensi, acccl, accu3, accov) %>% 
    left_join(., data_w %>% 
                  select(session, plot, type), by=c("session", "plot")) %>% 
    # generate data set so that the six plots from the same type are ordered
    # one after the other (and not 1-24)
    group_by(session, type) %>% 
    arrange(plot) %>% 
    mutate(plotNrWithin = 1:n()) %>%
    ungroup() %>% 
    group_by(plotNrWithin, type) %>% 
    mutate(effic_10righttrunc = ifelse(effic > quantile(effic, .9), NA, effic),
           effic_05righttrunc = ifelse(effic > quantile(effic, .95), NA, effic),
           log_effic_05righttrunc =log(effic_05righttrunc),
           log_effic_10righttrunc = log(effic_10righttrunc),
           plotNrWithin0 = plotNrWithin - 1,
           plotNrWithin_factor = as.factor(plotNrWithin)) %>% 
    ungroup()
```

## Demographics
```{r}
#| label: demographics
sociodemographics <- 
    read_delim("data/teachers_study2_update00.csv") %>%
    select(session, mcstu, texpe, mcsub) %>% 
    mutate(reply = session %in% c(data$session)) %>%
    filter(!reply == "FALSE") %>%
    select(-reply) %>%
    mutate(
        mcstu = as.factor(mcstu),
        texpe = as.numeric(texpe),
        mcsub = as.factor(mcsub),
        subject_stem = grepl("1", mcsub),
        subject_languages = grepl("2", mcsub),
        subject_humanities_socialscience = grepl("3", mcsub),
        subject_asthetic = grepl("4", mcsub)
    ) 

skim(sociodemographics) 
```


## Always plot yor raw data
### Dependent variables
#### Likert items
```{r}
#| label: plot raw diffi infor value

data |> 
  select(session, starts_with(c("diffi_", "infor_", "value_"))) |> 
    gather(variable, value, -session) |> 
    mutate(plot = substr(variable, 7, 8),
           variable = substr(variable, 1, 5)) |>
    spread(variable, value) |> 
    mutate(diffi = as_factor(diffi),
           infor = as_factor(infor),
           value = as_factor(value)) |> 
    ggpairs(columns = c("diffi", "infor", "value"))

ggplot(data)
```

#### Effect size Ratings
##### Abstract Metric
```{r}
ggpairs(data_w |> 
            select(rating_am, effsize_am) |> 
            mutate_all(as_factor) |> 
            na.omit(), 
        columns = c("rating_am", "effsize_am"),
        alpha = .3)
```

##### U3
```{r}
# With misconceptualizers
ggpairs(data_w |> 
            select(rating_u3, effsize_u3) |> 
            mutate(effsize_u3 = as_factor(effsize_u3)) |> 
            na.omit(), 
        columns = c("rating_u3", "effsize_u3"))

# Without misconceptualizers
ggpairs(data_w |> 
            filter(rating_u3_misconcept == F) |> 
            select(rating_u3, effsize_u3) |> 
            mutate(effsize_u3 = as_factor(effsize_u3)) |> 
            na.omit(), 
        columns = c("rating_u3", "effsize_u3"))
```


##### Overlap
```{r}
# With misconceptualizers
ggpairs(data_w |> 
            select(rating_ov, effsize_ov) |> 
            mutate(effsize_ov = as_factor(effsize_ov)) |> 
            na.omit(), 
        columns = c("rating_ov", "effsize_ov"))

# Without misconceptualizers
ggpairs(data_w |> 
            filter(rating_ov_misconcept == F) |> 
            select(rating_ov, effsize_ov) |> 
            mutate(effsize_ov = as_factor(effsize_ov)) |> 
            na.omit(), 
        columns = c("rating_ov", "effsize_ov"))
```

#### Sensitivity ratings
##### Sensitivity ordinal
```{r}
ggpairs(data_w |> 
            select(sensi_ordinal, effsize_am) |> 
            mutate(sensi_ordinal = as_factor(sensi_ordinal)) |> 
            na.omit(), 
        columns = c("sensi_ordinal", "effsize_am"))
```

##### Sensitivity correct
```{r}
ggpairs(data_w |> 
            select(sensi_correct, effsize_am) |> 
            mutate(sensi_correct = as_factor(sensi_correct)) |> 
            na.omit(), 
        columns = c("sensi_correct", "effsize_am"))
```


#### Misceptualizers
```{r}
ggpairs(data_w |> 
            select(rating_ov_misconcept, rating_u3_misconcept) |> 
            mutate_all(as_factor) |> 
            na.omit(), 
        columns = c("rating_ov_misconcept", "rating_u3_misconcept"))
```



## Hypotheses 1x
### Hypothesis H1a: Effects of benchmarks on accuracy
#### Abstract metric
```{r}
#|label: hypothesis 1a am
data_w |> 
  ggplot(aes(group, diff_am)) +
    geom_violin() +
    geom_jitter(aes(color = ameffsize_overunderstimation), alpha = .05) +
    stat_summary(fun.data = mean_sdl, 
                 fun.args = list(mult = 1)) +
    theme_minimal()

```


### Hypothesis H2a: Effects of benchmarks on sensitivity